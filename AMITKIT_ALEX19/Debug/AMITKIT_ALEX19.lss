
AMITKIT_ALEX19.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000015a  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000da1  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000713  00000000  00000000  00001121  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ce  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000238  00000000  00000000  00001f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c8  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004d8  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00002adc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  7a:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <setPinD>:
}
void resetPinB(int pinNumber){
	PORTB &= ~(1<<pinNumber);
}
void resetPinC(int pinNumber){
	PORTC &= ~(1<<pinNumber);
  82:	92 b3       	in	r25, 0x12	; 18
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <setPinD+0xc>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	8a 95       	dec	r24
  90:	e2 f7       	brpl	.-8      	; 0x8a <setPinD+0x8>
  92:	29 2b       	or	r18, r25
  94:	22 bb       	out	0x12, r18	; 18
  96:	08 95       	ret

00000098 <resetPinD>:
}
void resetPinD(int pinNumber){
	PORTD &= ~(1<<pinNumber);
  98:	92 b3       	in	r25, 0x12	; 18
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <resetPinD+0xc>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	8a 95       	dec	r24
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <resetPinD+0x8>
  a8:	20 95       	com	r18
  aa:	29 23       	and	r18, r25
  ac:	22 bb       	out	0x12, r18	; 18
  ae:	08 95       	ret

000000b0 <LCD_enable>:
}
void LCD_clear(void){
	LCD_command(0x01);
}
void LCD_enable(void){
	setPinD(EN);
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 41 00 	call	0x82	; 0x82 <setPinD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f e3       	ldi	r24, 0x3F	; 63
  ba:	9c e9       	ldi	r25, 0x9C	; 156
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_enable+0xc>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_enable+0x12>
  c2:	00 00       	nop
	_delay_ms(10);
	resetPinD(EN);
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 4c 00 	call	0x98	; 0x98 <resetPinD>
  cc:	8f e1       	ldi	r24, 0x1F	; 31
  ce:	9e e4       	ldi	r25, 0x4E	; 78
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_enable+0x20>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_enable+0x26>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <LCD_command>:
	LCD_command(0x38);
	LCD_command(0x0C);
	_delay_ms(10);
}
void LCD_command(char cmd){
	Data = cmd;
  da:	85 bb       	out	0x15, r24	; 21
	resetPinD(RS);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 4c 00 	call	0x98	; 0x98 <resetPinD>
	LCD_enable();
  e4:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_enable>
  e8:	08 95       	ret

000000ea <LCD_clear>:
	Data = data;
	setPinD(RS);
	LCD_enable();
}
void LCD_clear(void){
	LCD_command(0x01);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 6d 00 	call	0xda	; 0xda <LCD_command>
  f0:	08 95       	ret

000000f2 <init_LCD>:
#include "LCD_8bits.h"
#include "GPIO.h"
#include <util/delay.h>

void init_LCD(void){
	DataDIR = 0xFF;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	84 bb       	out	0x14, r24	; 20
	CmdDIR |= (1<<RS)|(1<<EN);
  f6:	81 b3       	in	r24, 0x11	; 17
  f8:	83 60       	ori	r24, 0x03	; 3
  fa:	81 bb       	out	0x11, r24	; 17
	LCD_clear();
  fc:	0e 94 75 00 	call	0xea	; 0xea <LCD_clear>
	LCD_command(0x38);
 100:	88 e3       	ldi	r24, 0x38	; 56
 102:	0e 94 6d 00 	call	0xda	; 0xda <LCD_command>
	LCD_command(0x0C);
 106:	8c e0       	ldi	r24, 0x0C	; 12
 108:	0e 94 6d 00 	call	0xda	; 0xda <LCD_command>
 10c:	8f e3       	ldi	r24, 0x3F	; 63
 10e:	9c e9       	ldi	r25, 0x9C	; 156
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <init_LCD+0x1e>
 114:	00 c0       	rjmp	.+0      	; 0x116 <init_LCD+0x24>
 116:	00 00       	nop
 118:	08 95       	ret

0000011a <LCD_data>:
	resetPinD(RS);
	LCD_enable();
	
}
void LCD_data(char data){
	Data = data;
 11a:	85 bb       	out	0x15, r24	; 21
	setPinD(RS);
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 41 00 	call	0x82	; 0x82 <setPinD>
	LCD_enable();
 124:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_enable>
 128:	08 95       	ret

0000012a <LCD_str>:
	_delay_ms(10);
	resetPinD(EN);
	_delay_ms(5);
}

void LCD_str(char * str){
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ec 01       	movw	r28, r24
	for(int i = 0;str[i] != '\0';i++ ){
 130:	88 81       	ld	r24, Y
 132:	88 23       	and	r24, r24
 134:	31 f0       	breq	.+12     	; 0x142 <LCD_str+0x18>
 136:	21 96       	adiw	r28, 0x01	; 1
		LCD_data(str[i]);
 138:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_data>
	resetPinD(EN);
	_delay_ms(5);
}

void LCD_str(char * str){
	for(int i = 0;str[i] != '\0';i++ ){
 13c:	89 91       	ld	r24, Y+
 13e:	81 11       	cpse	r24, r1
 140:	fb cf       	rjmp	.-10     	; 0x138 <LCD_str+0xe>
		LCD_data(str[i]);
	}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <main>:

int main(void)
{
	/* Replace with your application code */
	// PORTA( as OUTPUT
	init_LCD();
 148:	0e 94 79 00 	call	0xf2	; 0xf2 <init_LCD>
	LCD_str("Hello");
 14c:	80 e6       	ldi	r24, 0x60	; 96
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_str>
 154:	ff cf       	rjmp	.-2      	; 0x154 <main+0xc>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
